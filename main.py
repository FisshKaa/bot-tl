import datetime
import asyncio
import platform
import os


import logging
import aiofiles
from settings import RM
import calendar
import datetime
from keyboards import Users_input# –∫–Ω–æ–ø–∫–∏
from keyboards.Calendar import create_calendar
import phrases
import settings
from settings import Token, Users_db, Groups_db
from aiogram import Bot, types, executor
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from text_parsing import text_parsing # –º–æ–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
from phrases import bot_error_pic, bot_error, memasiki, stikers #phrases —ç—Ç–æ –ø–∞–ø–∫–∞ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∏–∫–æ–ª–∞–º–∏, —Å—Ç–∏–∫–µ—Ä–∞–º–∏, —Ñ—Ä–∞–∑–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–º–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –±–æ—Ç
from search_rasp import main_rasp# –º–æ–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove


import struct_checker
import logger as log

import random as rn
import pandas as pd
import tg_analytic # —ç—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è (–Ω–µ–¥–æ–¥–µ–ª–∞–ª) O_o
import re

struct_checker.check_paths(['Data',
                            'schedule_files',
                            'statistics',
                            'replacements',
                            'logs'])

sd = datetime.datetime.now()

print(sd.weekday())

try:
    Users = pd.read_csv(Users_db, dtype={
        'User': int,
        'Group': str,
        'RegisterTime': str,
        'info': str
    })
    print(Users)
except:
    Users = pd.DataFrame({'User': [0], 'Group':['TEST_GROUP'], 'RegisterTime': [f'{sd}'], 'Info': ['TEST_INFO']}, dtype={
        'User': int,
        'Group': str,
        'RegisterTime': str,
        'info': str
    })
    print(Users)
    Users.to_csv(Users_db, index=False)

try:
    Groups = pd.read_csv(Groups_db)
    print(Groups)
except:
    Groups = pd.DataFrame({'TG_Group': [-1], 'Group':['TEST_GROUP'], 'RegisterTime': [f'{sd}'], 'Info': ['TEST_INFO']})
    Groups.to_csv(Groups_db, index=False)
    print(Groups)


bot = Bot(token=Token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
# sost_rasp = 0 –ø–æ–º—è—Ç—å –æ –ö–∏—Ä–∏–ª–ª–µ(–ø–∏–¥—Ä)
group_rasp = {}

class UserState(StatesGroup):
    waiting_for_group = State()
    waiting_for_month = State()
    waiting_for_input_group = State()

@dp.message_handler(commands=['send'])
async def send_msg_to_all(msg: types.Message):
    await log.user(msg)
    if msg.from_user.id in settings.admins:
        text = msg.text.replace('/send ', '')
        ids = Users.loc[:, 'User']
        for item in ids:
            print('[*]', item, end='  ')
            try:
                await bot.send_message(chat_id=item, text=text, disable_web_page_preview=True)
                print()
            except:
                print('ERROR')
        await log.bot(msg, "<–ù–ê –≠–¢–£ –ö–û–ú–ê–ù–î–£ –û–¢–í–ï–¢ –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø>")

    else:
        await msg.answer('üòõ')
        await log.bot(msg, 'üòõ')

@dp.message_handler(commands=['send-list'])
async def send_to_list(msg: types.Message):
    await log.user(msg)
    if msg.from_user.id in settings.admins:
        try:
            raw = msg.text.split(' ')
            ids = eval(f"[{raw[1]}]")
            text = ' '.join(raw[2:])
            print(raw)
            print(ids)
            print(text)
            id_err = []
            for id in ids:
                try:
                    print(f"[*] {id}  ", end='')
                    await bot.send_message(chat_id=id, text=text)
                    print()
                except:
                    print('ERROR')
                    id_err.append(id)
            if len(id_err) > 0:
                await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º –ª–∏—á–Ω–æ—Å—Ç—è–º: \n{id_err}")
                await log.bot(msg, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º –ª–∏—á–Ω–æ—Å—Ç—è–º: \n{id_err}")
        except:
            await msg.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã")
            await log.bot(msg, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã")
    else:
        await msg.answer('üòõ')
        await log.bot(msg, 'üòõ')

@dp.message_handler(commands=['sticker'])
async def send_sticker_direct(msg: types.Message):
    await log.user(msg)
    if msg.from_user.id in settings.admins:
        raw = msg.text.split(' ')
        try:
            id = int(raw[1])
            sticker_id = raw[2]
            await bot.send_sticker(chat_id=id, sticker=sticker_id)
            await msg.answer(f"–°—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ID: {id}")
            await log.bot(msg, f"–°—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ID: {id}")
            await bot.send_sticker(chat_id=msg.from_user.id, sticker=sticker_id)
            await log.bot(msg, "<–°–¢–ò–ö–ï–†>")
        except:
            await msg.answer("–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞")
            await log.bot(msg, "–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞")
    else:
        await msg.answer('üòõ')
        await log.bot(msg, 'üòõ')

@dp.message_handler(commands=['msg'])
async def send_msg_to_admins(msg: types.Message):
    await log.user(msg)
    # raw = msg.text.split(':')
    try:
        text = msg.text.replace("/msg", "").strip() # —É–¥–∞–ª—è–µ–º "/msg" –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
        if not text: # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            await msg.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ')
            await log.bot(msg, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ')
            return
    except:
        await msg.answer('–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        await log.bot(msg, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        return
    sended = False
    message = f"üíå–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.from_user.first_name}({msg.from_user.id}):\n{text}"
    for id in settings.admins:
        try:
            await bot.send_message(chat_id=id, text=message)
            sended = True
        except:
            await msg.answer(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')
            await log.bot(msg, f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {msg.from_user.id}, {raw}")
    if sended == True:
        await msg.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æüíå')
        await log.bot(msg, f'–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æüíå')

@dp.message_handler(commands=['direct'])
async def direct(msg: types.Message):
    await log.user(msg)
    if msg.from_user.id in settings.admins:
        raw = msg.text.split(' ')
        try:
            id = int(raw[1])
            text = ' '.join(raw[2:])
            await bot.send_message(chat_id=id, text=text, disable_web_page_preview=True)
            await msg.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ID: {id}')
            await log.bot(msg, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ID: {id}')
        except:
            print(msg.from_user.id, raw, 'ERROR')
    else:
        await msg.answer('üòõ')
        await log.bot(msg, 'üòõ')

@dp.message_handler(commands=['start']) # –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def process_start_command(message: types.Message):
    td = datetime.datetime.now()
    global Users
    global Groups
    id = message.from_user.id
    chat_id = message.chat.id
    print(message.chat)
    # tg_analytic.statistics(id, 'start')
    await log.user(msg=message)

    if chat_id < 0:
        if Groups.loc[Groups['TG_Group'] == chat_id].empty:
            Groups = pd.concat([Groups, pd.DataFrame({'TG_Group': [chat_id], 'Group':['-'], 'RegisterTime': [f'{td}'], 'Info': [str(message.chat)]})])
            Groups.to_csv(Groups_db, index=False)
            await message.answer(phrases.hello_msg_1, parse_mode='html', reply_markup=Users_input)
            await log.bot(message, phrases.hello_msg_1)
            print(f'[*] New group: {chat_id}')
        else:
            await message.answer(phrases.hello_msg_2, parse_mode='html', reply_markup=Users_input)
            await log.bot(message, phrases.hello_msg_2)

        if Users.loc[Users['User'] == id].empty:
            Users = pd.concat([Users, pd.DataFrame({'User': [id], 'Group': '-', 'RegisterTime': [f'{td}'], 'Info': [str(message.from_user)]})])
            Users.to_csv(Users_db, index=False)
            print(f'[*] New user: {id}')

    else:
        if Users.loc[Users['User'] == id].empty:
            Users = pd.concat([Users, pd.DataFrame({'User': [id], 'Group': '-', 'RegisterTime': [f'{td}'], 'Info': [str(message.from_user)]})])
            await message.answer(phrases.hello_msg_1, parse_mode='html', reply_markup=Users_input)
            await log.bot(message, phrases.hello_msg_2)
            Users.to_csv(Users_db, index=False)
            print(f'[*] New user: {id}')
        else:
            await message.answer(phrases.hello_msg_2, parse_mode='html', reply_markup=Users_input)
            await log.bot(message, phrases.hello_msg_2)


#–∫–æ–≥–¥–∞ —Ç–æ –∑–¥–µ—Å—å –±—ã–ª –∫—É—Å–æ–∫ –∫–æ–¥–∞ –¥–ª—è –º–µ–º–æ–≤ üò¢

@dp.message_handler(regexp=re.compile(r'^–ü–æ–º–æ—â—å$', re.IGNORECASE))   #–Ω—É —Ç—É—Ç –ø–æ–Ω—è—Ç–Ω–æ, –ø–æ–º–æ—â—å
async def process_help_command(message: types.Message):
    # tg_analytic.statistics(message.from_user.id, 'help')
    await log.user(msg=message)
    await message.answer(phrases.help, parse_mode='html', reply_markup=Users_input)
    await log.bot(msg=message, answer=phrases.help)

@dp.message_handler(regexp=re.compile(r'^–ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ª—é–±–æ–π –≥—Ä—É–ø–ø—ã$', re.IGNORECASE))
async def process_help_command(message: types.Message, state: FSMContext):
    await log.user(msg=message)
    async with state.proxy() as data:
        data.clear()
        data['group'] = None
    await UserState.waiting_for_group.set()
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É', reply_markup=types.ReplyKeyboardRemove())
    await log.bot(msg=message, answer='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É')


@dp.message_handler(state=UserState.waiting_for_group)
async def process_group(message: types.Message, state: FSMContext):
    await log.user(msg=message)
    async with state.proxy() as data:
        data['group'] = message.text
    await UserState.waiting_for_month.set()
    async with aiofiles.open(RM, mode='r', encoding='UTF-8') as f:
        month = await f.read()
    now = datetime.datetime.now()
    year = now.year
    month_number = int(month)
    if 1 <= month_number <= 12:
        calendar_keyboard = create_calendar(year, month_number)
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å(–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –¥–µ–Ω—å, —É –≤–∞—Å –±—É–¥–µ—Ç —Ä–æ–≤–Ω–æ 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–Ω–∏):', reply_markup=calendar_keyboard)
        await bot.send_message(message.from_user.id, '–ü–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç 20 –¥–æ 80 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...',)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.callback_query_handler(lambda c: c.data.startswith('day_'), state=UserState.waiting_for_month)
async def process_day_selection(callback_query: types.CallbackQuery, state: FSMContext):
    await log.user(msg=callback_query.message)
    day = callback_query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–Ω—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
    async with state.proxy() as data:
        data['day'] = day  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await sms_pasrsing(callback_query.message, state)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é sms_pasrsing


@dp.message_handler(regexp=re.compile(r'^–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É$', re.IGNORECASE))
async def ask_user_group(msg: types.Message, state: FSMContext):
    await log.user(msg=msg)
    async with state.proxy() as data:
        data.clear()
        data['input_group'] = None
    await UserState.waiting_for_input_group.set()
    await bot.send_message(msg.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:', reply_markup=types.ReplyKeyboardRemove())
    await log.bot(msg=msg, answer='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:')

@dp.message_handler(state=UserState.waiting_for_input_group)
async def process_group_message(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['input_group'] = msg.text
    group = data['input_group']
    Users.loc[Users['User'] == msg.from_user.id, 'Group'] = group
    Users.to_csv(Users_db, index=False)
    await msg.answer('–ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ' + group, reply_markup=Users_input)
    await log.bot(msg=msg, answer='–ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ' + group)
    await state.finish()
    # Register the message handler for group input


@dp.message_handler(regexp=re.compile(r'^–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å/–¥–Ω–∏$', re.IGNORECASE))
async def myrasp(msg: types.Message, state: FSMContext):
    await log.user(msg=msg)
    search = Users.loc[Users['User'] == msg.from_user.id, 'Group'].values
    if search == '-':
        await msg.answer(phrases.group_err_dlg, parse_mode='html')
        await log.bot(msg=msg, answer=phrases.group_err_dlg)
        return
    else:
        group = search[0]

    async with aiofiles.open(RM, mode='r', encoding='UTF-8') as f:
        month = await f.read()
    now = datetime.datetime.now()
    year = now.year
    month_number = int(month)
    if 1 <= month_number <= 12:
        calendar_keyboard = create_calendar(year, month_number)
        await bot.send_message(msg.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å(–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –¥–µ–Ω—å, —É –≤–∞—Å –±—É–¥–µ—Ç —Ä–æ–≤–Ω–æ 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–Ω–∏):', reply_markup=calendar_keyboard)
        await bot.send_message(msg.from_user.id,
                               '–ü–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç 20 –¥–æ 80 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...',
                               reply_markup=types.ReplyKeyboardRemove())
        await UserState.waiting_for_month.set()
        await state.update_data(group=group)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    else:
        await msg.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        await log.bot(msg=msg, answer='–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è')

@dp.callback_query_handler(lambda c: c.data.startswith('day_'), state=UserState.waiting_for_month)
async def process_day_selection(callback_query: types.CallbackQuery, state: FSMContext):
    await log.user(msg=callback_query.message)
    day = callback_query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–Ω—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
    async with state.proxy() as data:
        data['day'] = day  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await UserState.waiting_for_day.set()
    await state.update_data(day=day)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await sms_parsing(callback_query.message, state)


@dp.message_handler(regexp=re.compile(r'^–Ω–∞ –ó–∞–≤—Ç—Ä–∞$', re.IGNORECASE))
async def tomorrow_rasp(msg: types.Message):
    await log.user(msg=msg)
    today = datetime.datetime.now()
    try:
        search = Users.loc[Users['User'] == msg.from_user.id, 'Group'].values
        if search == '-':
            await msg.answer(phrases.group_err_dlg, parse_mode='html', reply_markup=Users_input)
            await log.bot(msg=msg, answer=phrases.group_err_dlg)
            return
        else:
            group = search[0]
        day = today.day + 1
        await bot.send_message(msg.from_user.id,
                               '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç 20 –¥–æ 80 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...',
                               reply_markup=types.ReplyKeyboardRemove())
        rasp = await main_rasp(group, day)
        await msg.answer(rasp, parse_mode='html', reply_markup=Users_input)
        await log.bot(msg=msg, answer=rasp)
    except:
        await msg.answer('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', reply_markup=Users_input)
        await log.bot(msg=msg, answer='–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞')
        print('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ \n', msg.from_user)


@dp.message_handler(regexp=re.compile(r'^–Ω–∞ –°–µ–≥–æ–¥–Ω—è$', re.IGNORECASE))
async def tomorrow_rasp(msg: types.Message):
    await log.user(msg=msg)
    today = datetime.datetime.now()

    try:
        search = Users.loc[Users['User'] == msg.from_user.id, 'Group'].values
        if search == '-':
            await msg.answer(phrases.group_err_dlg, parse_mode='html', reply_markup=Users_input)
            await log.bot(msg=msg, answer=phrases.group_err_dlg)
            return
        else:
            group = search[0]
        day = today.day
        await bot.send_message(msg.from_user.id,
                               '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç 20 –¥–æ 80 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...',
                               reply_markup=types.ReplyKeyboardRemove())
        rasp = await main_rasp(group, day)
        await msg.answer(rasp, parse_mode='html', reply_markup=Users_input)
        await log.bot(msg=msg, answer=rasp)

    except:
        await msg.answer('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', reply_markup=Users_input)
        await log.bot(msg=msg, answer='–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞')
        print('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ \n', msg.from_user)

# @dp.message_handler(commands=['statistics']) #—ç—Ç–æ –¥–ª—è —Ç–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
# async def process_stat(msg: types.Message):
#     message = tg_analytic.analysis(msg.text.split(), msg.from_user.id)
#     await bot.send_message(msg.from_user.id, message)
#     if search == '-':
#         await msg.answer(phrases.group_err_dlg, parse_mode='html')
#         return

@dp.message_handler(commands=['serverinfo'])
async def server_info(msg: types.Message):
    await log.user(msg=msg)
    if msg.from_user.id in settings.admins:
        info = platform.platform()
        user = os.getlogin()
        await msg.answer(f'{info}\n'
                         f'{user}\n')
        await log.bot(msg=msg, answer=(f'{info}\n'
                                    f'{user}\n'))


async def sms_pasrsing(msg: types.Message, state: FSMContext):
    await log.user(msg=msg)
    async with state.proxy() as data:
        group = data.get('group')
        phr = data.get('day')
        if group is not None and phr is not None:
            try:
                rasp = await main_rasp(group, phr)
                await msg.answer(rasp, parse_mode='html', reply_markup=Users_input)
                await log.bot(msg, rasp)
            except Exception as e:
                await msg.answer(phrases.group_not_find_err, parse_mode='html', reply_markup=Users_input)
                await log.bot(msg, f"{phrases.group_not_find_err}\nException: {str(e)}")
        else:
            await msg.answer(phrases.invalid_input_err, parse_mode='html', reply_markup=Users_input)
            await log.bot(msg, "<–≠–¢–û–¢ –ë–õ–û–ö –ö–û–î–ê –ù–ï –î–û–õ–ñ–ï–ù –í–´–ó–´–í–ê–¢–¨–°–Ø>")
        await state.finish()


executor.start_polling(dp)  # —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –≤—Å–µ–≥–¥–∞